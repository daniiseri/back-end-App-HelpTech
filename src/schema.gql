# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Alternative {
  description: String!
  id: ID!
  idCategory: Int
  idQuest: Int
  level: Int!
}

type Category {
  description: String!
  id: ID!
}

type Credentials {
  roles: [String!]
  token: String!
  user: User!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Hardware {
  capacity: Float!
  id: ID!
  idType: Int
  model: String!
  price: Float!
}

type MergeCategory {
  id: ID!
  idCategoryOne: Int!
  idCategoryTwo: Int!
}

type Mutation {
  createAlternative(idCategory: Float!, idQuest: Float!, newAlternativeData: NewAlternativeInput!): ResultSetHeader!
  createCategory(newCategoryInput: NewCategoryInput!): ResultSetHeader!
  createHardware(newHardwareInput: NewHardwareInput!): ResultSetHeader!
  createMergeCategory: MergeCategory!
  createQuest(idCategory: Float!, newQuestData: NewQuestInput!): ResultSetHeader!
  createType(newTypeInput: NewTypeInput!): ResultSetHeader!
  createUser(newUserInput: NewUserInput!): ResultSetHeader!
  createUserResponse(newUserResponseInput: NewUserResponseInput!): ResultSetHeader!
  deleteAlternative(id: Float!): Boolean!
  deleteCategory(id: Float!): Boolean!
  deleteHardware(id: Float!): Boolean!
  deleteQuest(id: Float!): Boolean!
  deleteType(id: Float!): Boolean!
  deleteUser(id: Float!): Boolean!
  deleteUserResponse(id: Float!): Boolean!
  login(email: String!, password: String!): Credentials!
  udateUserResponse(id: Float!, idAlternative: Float!): ResultSetHeader!
  updateAlternative(description: String!, id: Float!, idCategory: Float!, idQuests: Float!, level: Float!): ResultSetHeader!
  updateCategory(description: String!, id: Float!): ResultSetHeader!
  updateHardware(capacity: Float!, id: Float!, idType: Float!, model: String!, price: Float!): ResultSetHeader!
  updateQuest(description: String!, id: Float!, idCategory: Float!): ResultSetHeader!
  updateType(description: String!, id: Float!): ResultSetHeader!
  updateUser(email: String!, id: Float!, name: String!, password: String!): ResultSetHeader!
}

input NewAlternativeInput {
  description: String!
  level: Int!
}

input NewCategoryInput {
  description: String!
}

input NewHardwareInput {
  capacity: Float!
  idType: Float!
  model: String!
  price: Float!
}

input NewQuestInput {
  description: String!
}

input NewTypeInput {
  description: String!
}

input NewUserInput {
  email: String!
  name: ID!
  password: String!
}

input NewUserResponseInput {
  idAlternative: Int!
  idUser: Int!
}

type Query {
  alternatives: [Alternative!]!
  alternativesByQuest(questId: Float!): [Alternative!]!
  categories: [Category!]!
  hardwares: [Hardware!]!
  mergeCategories: [MergeCategory!]!
  quests: [Quest!]!
  questsByCategory(categoryId: Float!): [Quest!]!
  type: [Type!]!
  types: [Type!]!
  userReponses: [UserResponse!]!
  userResponseByUser(idUser: Float!): [UserResponse!]!
  users: [User!]!
}

type Quest {
  description: String!
  id: ID!
  idCategory: Int
}

type ResultSetHeader {
  affectedRows: Float!
  fieldCount: Float!
  info: String!
  insertId: Float!
  serverStatus: Float!
  warningStatus: Float!
}

type Type {
  description: String!
  id: ID!
}

type User {
  email: String!
  id: ID!
  name: String!
  password: String
}

type UserResponse {
  date: DateTime!
  id: ID!
  idAlternative: Float!
  idUser: Float!
}
